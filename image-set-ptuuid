#!/bin/bash

trap '{ stty sane; echo ""; errexit "Aborted"; }' SIGINT SIGTERM

MNTPATH="/root/img-set-ptuuid-mnt"

mkloop1()
{
  local INFO1=""
  local SIZE1=0

  INFO1="$(fdisk -lu "${IMGFILE}")"
  START1=$(grep W95 <<< "${INFO1}" | awk '{print $2}')
  SIZE1=$(grep W95 <<< "${INFO1}" | awk '{print $4}')
  LOOP1="$(losetup -f --show -o $((${START1} * 512)) --sizelimit $((${SIZE1} * 512)) "${IMGFILE}")"
  if [ $? -ne 0 ]; then
    errexit "Unable to create BOOT loop device"
  fi
}

rmloop1()
{
  if [ "${LOOP1}" != "" ]; then
    losetup -d "${LOOP1}"
    LOOP1="" 
 fi
}

mkloop2()
{
  local INFO2=""
  local SIZE2=0

  INFO2="$(fdisk -lu "${IMGFILE}")"
  START2=$(grep Linux <<< "${INFO2}" | awk '{print $2}')
  SIZE2=$(grep Linux <<< "${INFO2}" | awk '{print $4}')
  LOOP2="$(losetup -f --show -o $((${START2} * 512)) --sizelimit $((${SIZE2} * 512)) "${IMGFILE}")"
  if [ $? -ne 0 ]; then
    errexit "Unable to create ROOT loop device"
  fi
}

rmloop2()
{
  if [ "${LOOP2}" != "" ]; then
    losetup -d "${LOOP2}"
    LOOP2="" 
  fi
}

mntimg()
{
  if [ -d "${MNTPATH}"/ ]; then
    rm -r "${MNTPATH}"/
  fi
  mkdir "${MNTPATH}"/
  if [ $? -ne 0 ]; then
    errexit "Unable to make ROOT partition mount point"
  fi
  mkloop2
  mount "${LOOP2}" "${MNTPATH}"/
  if [ $? -ne 0 ]; then
    errexit "Unable to mount image ROOT partition"
  fi
  mkdir -p "${MNTPATH}"/boot/
  if [ $? -ne 0 ]; then
    errexit "Unable to make BOOT partition mount point"
  fi
  mkloop1
  mount "${LOOP1}" "${MNTPATH}"/boot/
  if [ $? -ne 0 ]; then
    errexit "Unable to mount image BOOT partition"
  fi
}

umntimg()
{
  umount "${MNTPATH}"/boot/
  if [ $? -ne 0 ]; then
    errexit "Unable to unmount image BOOT partition"
  fi
  rmloop1
  umount "${MNTPATH}"/
  if [ $? -ne 0 ]; then
    errexit "Unable to unmount image ROOT partition"
  fi
  rmloop2
  rm -r "${MNTPATH}"/
}

ckfs()
{
  e2fsck -f "${LOOP2}"
  if [ $? -ne 0 ]; then
    errexit "Image ROOT filesystem appears corrupted"
  fi
}

errexit()
{
  echo ""
  echo "$1"
  echo ""
  umount "${MNTPATH}"/boot/ &> /dev/null
  umount "${MNTPATH}"/ &> /dev/null
  rm -r "${MNTPATH}"/ &> /dev/null
  rmloop1
  rmloop2
  exit 1
}

usage()
{
  errexit "Usage: $0 imagefile ptuuid"
}

LOOP1=""
LOOP2=""

if [ $(id -u) -ne 0 ]; then
  errexit "$0 must be run as root user"
fi

IMGFILE="$1"
PTUUID="$2"
if [[ "${IMGFILE}" = "" || "${PTUUID}" = "" ]]; then
  usage
fi
if [ ! -f "${IMGFILE}" ]; then
  errexit "${IMGFILE} not found"
fi
PTUUID="$(tr [A-Z] [a-z] <<< "${PTUUID}")"
if [[ ! "${PTUUID}" =~ ^[[:xdigit:]]{8}$ ]]; then
  errexit "Invalid PTUUID: ${PTUUID}"
fi
echo ""
echo -n "Set PTUUID to ${PTUUID} on ${IMGFILE} (y/n)? "
while read -r -n 1 -s answer; do
  if [[ "${answer}" = [yYnN] ]]; then
    echo "${answer}"
    if [[ "${answer}" = [yY] ]]; then
      break
    else
      errexit "Aborted"
    fi
  fi
done
echo ""
mkloop2
ckfs
rmloop2
echo ""
fdisk "${IMGFILE}" <<EOF > /dev/null
p
x
i
0x${PTUUID}
r
p
w
EOF
mntimg
sync
PARTUUID="$(sed -n 's|^.*PARTUUID=\(\S\+\)\s.*|\1|p' "${MNTPATH}"/boot/cmdline.txt)"
if [ "${PARTUUID}" != "" ]; then
  sed -i "s|PARTUUID=\S\+\s|PARTUUID=${PTUUID}-02 |" "${MNTPATH}"/boot/cmdline.txt
  sed -i "s|${PARTUUID:0:(${#PARTUUID} - 1)}|${PTUUID}-0|" "${MNTPATH}"/etc/fstab
fi
sync
umntimg
